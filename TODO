Now
----
- unit testy pro inferenci vyskytu pojmu -> odladeni (prip. soupis veci k
  reseni)
- pak doimplementovat get_registry_tagset, vyresit strukturu projektu a
  absolutni cesty,  cele propojit a odzkouset na Albe

Must
----
- struktura projektu a absolutni cesty
- test: co se stane, kdyz vstupni text obsahuje retezec "</doc>" atp.
- dodelani vytvareni konfiguraku + zapis do souboru
- odhaleni dalsich vyskytu termu v textu
- vyresit tagovani a lemmetizaci cisel
- pri odhalovani dalsich vyskytu termu je potreba mit / brat v uvahu cisla na
  #num#, nersp. @card@-x
- desamb: parametry, co ty hacky?! (pridavani tecek, casto spatne), pri
  nejmensim je v postprocessingu odstranit...
- vytvoreni konfiguraku a kompilovani korpusu
- kontrola vysledneho korpusu aplikaci corpcheck (./wikicorpora ... --check)
- rozpoznavani datumu (zavest specialni strukturu?), ale vyuzit jiz oznacenych
  dat (i datumy muzou mit na wiki svoje WURI)
- sestaveni korpusu pro aj a cj a rozjeti na Sketch Engine
- dokumentace (jednotne), vcetne vygenerovani
- testy pro wikimarkup parsing
- vylepseni parsovani, napr. odstraneni prazdnych sekci
- odstraneni prazdnych pojmu (muze souviset s pouzitym parserem)

Should
------
- volitelne logovani na standardni vystup / do souboru (daneho nejlepe
  konfiguracnim souborem, spise nez argumentem)
- stranky projektu (staci na GH) s odkazem na demo na Sketch Engine
- vyresit namespacy poradne (pokud muzou byt vnorene)
- unit testy
- prehlednou strukturu projektu


Could
-----
- vylepseni parsovani wikimarkupu, napr. seznamy
- volitelna jmena vstupu/vystupu pro skript wikicorpora.py, pripadne umozneni
  nastaveni vychoziho adresare pro wiki korpusy (pres konfigurak)
- existujici korpusy z Wikipedia, podobne projekty
- projit svoje zalozky k projektu wikicorpora
- rozpoznavani dalsich pojmenovanych entit (zrovna na wiki neni zasadni)
- zvazit pouziti bezpecnejsich defused packages pro parsovani XML
- vyzkouset jine pristupy parsovani xml
- pohlidat, aby skript koncil slusne (napr. pokud neexistuje konfigurak, tak to
  jasne prohlasit, misto vyhozeni top level vyjimky)
- do dokumentace pridat popis, jak musi vypadat konfiguracni soubor
  (config.yaml) + rozumne osetreni toho, kdyz tak vypadat nebude
- vyfaktorovani spolecne funkcionality z create_prevertical a create_dump
  (zbaveni se duplicity kodu), mozna trida Dump (nebo jen modul)?
- kontrola stability pameti pri pruchodu celym dumpem (pri specifickem
  samplovani) a pri prevertikalizaci


Want
----
- vytvaret vzorkove dumpy v unicode misto ASCII
- vyzkouset jine parsery WikiMarkupu, dalsi vylepsovani parsovani (seznamy
  atp.)
- pri moznosti predelavani jiz existujiciho korpusu brat v uvahu data zmen
  prerekvizit a aktualniho souboru (jako make)
- prubezna aktualizace korpusu? (jednak wiki se porad rozsiruje/meni, jednak by
  bylo dobre umet vytvaret korpus i z ostatnich jednou zpracovanych stranek)
- WikiCorpus: kontrola, zda predany jazyk je mezi iso kody
- WikiCorpus jako potomek obecnejsi tridy korpus (ktera se pozdeji taky bude
  hodit)
- umoznit, aby i vzorkove dumpy mohli byt komprimovane
- stranky s redirectem: vyuzit jejich title (aktualne je proste ignorujeme)
