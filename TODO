Must
----
- vyresit tagovani a lemmetizaci cisel
- odhaleni dalsich vyskytu termu v textu
- vytvoreni konfiguraku a kompilovani korpusu
- rozpoznavani datumu (zavest specialni strukturu?), ale vyuzit jiz oznacenych
  dat (i datumy muzou mit na wiki svoje WURI)
- sestaveni korpusu pro aj a cj a rozjeti na Sketch Engine
- dokumentace (jednotne), vcetne vygenerovani
- nasadit lepsi parser WikiMarkupu a otestovat, ze zvlada (nejak) vsechny
  konstrukty WikiMarkupu parsovani vsech konstruktu WikiMarkupu; priklad
  problemu soucasneho parseru '[[step]]s'
- odstraneni prazdnych pojmu (muze souviset s pouzitym parserem)
- testy pro wikimarkup parsing
- kontrola vysledneho korpusu aplikaci corpcheck

Should
------
- volitelne logovani na standardni vystup / do souboru (daneho nejlepe
  konfiguracnim souborem, spise nez argumentem)
- stranky projektu (staci na GH) s odkazem na demo na Sketch Engine
- vyresit namespacy poradne (pokud muzou byt vnorene)
- unit testy
- prehlednou strukturu projektu


Could
-----
- rozsireni lemmatizace a POS taggingu i na dalsi jazyky, napriklad podle
  popisu podle popisu na http://nlp.fi.muni.cz/ma/ by mela majka
  fungovat pro Czech, Slovak, Polish, Swedish, German, French, Italian,
  English, Portuguese, Catalan, Welsh, Spanish, Galician, Asturian
  and Russian (vyzkouset, zeptat se na dalsi nastroje)
- volitelna jmena vstupu/vystupu pro skript wikicorpora.py, pripadne umozneni
  nastaveni vychoziho adresare pro wiki korpusy (pres konfigurak)
- existujici korpusy z Wikipedia, podobne projekty
- projit svoje zalozky k projektu wikicorpora
- rozpoznavani dalsich pojmenovanych entit (zrovna na wiki neni zasadni)
- zvazit pouziti bezpecnejsich defused packages pro parsovani XML
- vyzkouset jine pristupy parsovani xml
- pohlidat, aby skript koncil slusne (napr. pokud neexistuje konfigurak, tak to
  jasne prohlasit, misto vyhozeni top level vyjimky)
- do dokumentace pridat popis, jak musi vypadat konfiguracni soubor
  (config.yaml) + rozumne osetreni toho, kdyz tak vypadat nebude
- vyfaktorovani spolecne funkcionality z create_prevertical a create_dump
  (zbaveni se duplicity kodu), mozna trida Dump (nebo jen modul)?
- kontrola stability pameti pri pruchodu celym dumpem (pri specifickem
  samplovani) a pri prevertikalizaci


Want
----
- pri moznosti predelavani jiz existujiciho korpusu brat v uvahu data zmen
  prerekvizit a aktualniho souboru (jako make)
- prubezna aktualizace korpusu? (jednak wiki se porad rozsiruje/meni, jednak by
  bylo dobre umet vytvaret korpus i z ostatnich jednou zpracovanych stranek)
- WikiCorpus: kontrola, zda predany jazyk je mezi iso kody
- WikiCorpus jako potomek obecnejsi tridy korpus (ktera se pozdeji taky bude
  hodit)
- umoznit, aby i vzorkove dumpy mohli byt komprimovane
- stranky s redirectem: vyuzit jejich title (aktualne je proste ignorujeme)
